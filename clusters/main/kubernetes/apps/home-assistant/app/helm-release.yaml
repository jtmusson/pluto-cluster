metadata:
    name: home-assistant
    namespace: home-assistant
spec:
    interval: 15m
    chart:
        spec:
            chart: home-assistant
            version: 25.1.8
            sourceRef:
                kind: HelmRepository
                name: truecharts
                namespace: flux-system
    releaseName: home-assistant
    values:
        TZ: Europe/London
        addons:
            codeserver:
                enabled: true
                ingress:
                    enabled: true
                    hosts:
                        - host: hass-vs.musson-lan.uk
                          paths:
                            - path: /
                              pathType: Prefix
                    ingressClassName: ""
                    integrations:
                        certManager:
                            certificateIssuer: cloudflare-prod
                            enabled: true
                        traefik:
                            allowCors: false
                            enabled: true
                            entrypoints:
                                - websecure
                            middlewares:
                                - name: allowlist-private
                                  namespace: ""
                service:
                    ports:
                        codeserver:
                            port: 36107
                    type: ClusterIP
            netshoot:
                enabled: false
            vpn:
                type: disabled
        cnpg:
            main:
                backups:
                    credentials: backblaze
                    enabled: true
                    retentionPolicy: ""
                    revision: ""
                cluster:
                    instances: 1
                    singleNode: true
                database: home-assistant
                enabled: true
                hibernate: false
                mode: replica
                monitoring:
                    disableDefaultQueries: false
                    enablePodMonitor: true
                password: PLACEHOLDERPASSWORD
                pgVersion: 16
                pooler:
                    enabled: false
                recovery:
                    enabled: false
                    revision: ""
                    serverName: ""
                user: home-assistant
        configmap:
            init:
                data:
                    configuration.yaml.default: |-
                        # Configure a default setup of Home Assistant (frontend, api, etc)
                        default_config:

                        # Text to speech
                        tts:
                          - platform: google_translate

                        group: !include groups.yaml
                        automation: !include automations.yaml
                        script: !include scripts.yaml
                        scene: !include scenes.yaml
                    http.default: |-
                        http:
                          use_x_forwarded_for: true
                          trusted_proxies:
                            {{- if hasKey .Values "ixChartContext" }}
                            - {{ .Values.ixChartContext.kubernetes_config.cluster_cidr }}
                            {{- else }}
                              {{- range .Values.homeassistant.trusted_proxies }}
                            - {{ . }}
                              {{- end }}
                            {{- end }}
                    init.sh: |-
                        #!/bin/sh
                        {{- $haDBURL := (printf "%s?client_encoding=utf8" ($.Values.cnpg.main.creds.std | trimAll "\"")) }}
                        config="/config/configuration.yaml"
                        default="/config/init"
                        if [ ! -f "$config" ]; then
                          echo "File [$config] does NOT exist. Creating..."
                          cp "$default/configuration.yaml.default" "$config"
                        fi
                        if ! grep -q "recorder:" "$config"; then
                          echo "Section [recorder] does NOT exist in [$config]. Appending..."
                          echo "" >> "$config"
                          cat "$default/recorder.default" >> "$config"
                        fi
                        if ! grep -q "http:" "$config"; then
                          echo "Section [http] does NOT exist in [$config]. Appending..."
                          echo "" >> "$config"
                          cat "$default/http.default" >> "$config"
                        fi

                        echo "Updating database URL"
                        yq -i '.recorder.db_url = "{{ $haDBURL }}"' "$config"
                        echo "Done"

                        echo "Creating include files..."
                        for include_file in groups.yaml automations.yaml scripts.yaml scenes.yaml; do
                          if [ ! -f "/config/$include_file" ]; then
                            echo "File [$include_file] missing. Creating"
                            touch "/config/$include_file"
                          fi
                        done

                        cd "/config" || echo "Could not change path to /config"
                        echo "Creating custom_components directory..."
                        mkdir -p "/config/custom_components" || echo "custom_components directory already exists"

                        echo "Changing to the custom_components directory..."
                        cd "/config/custom_components" || echo "Could not change path to /config/custom_components"

                        echo "Downloading HACS"
                        wget "https://github.com/hacs/integration/releases/latest/download/hacs.zip" || exit 0

                        if [ -d "/config/custom_components/hacs" ]; then
                          echo "HACS directory already exist, cleaning up..."
                          rm -R "/config/custom_components/hacs"
                        fi

                        echo "Creating HACS directory..."
                        mkdir -p "/config/custom_components/hacs"

                        echo "Unpacking HACS..."
                        unzip "/config/custom_components/hacs.zip" -d "/config/custom_components/hacs" >/dev/null 2>&1

                        echo "Removing HACS zip file..."
                        rm "/config/custom_components/hacs.zip"
                        echo "Installation complete."
                    recorder.default: |-
                        recorder:
                          purge_keep_days: 30
                          commit_interval: 3
                          db_url: {{ (printf "%s?client_encoding=utf8" (.Values.cnpg.main.creds.std | trimAll "\"")) | quote }}
                enabled: true
        credentials:
            backblaze:
                accessKey: REPLACED
                bucket: Pluto-JTM
                encrKey: REPLACED
                name: backblaze
                path: ""
                secretKey: REPLACED
                type: s3
                url: https://s3.us-west-001.backblazeb2.com
        ingress:
            main:
                enabled: true
                hosts:
                    - host: hass.musson-serv.uk
                      paths:
                        - path: /
                          pathType: Prefix
                ingressClassName: ""
                integrations:
                    certManager:
                        certificateIssuer: cloudflare-prod
                        enabled: true
                    homepage:
                        description: ""
                        enabled: true
                        group: Smart home
                        icon: ""
                        name: ""
                        widget:
                            custom:
                                key: REPLACED
                            customkv:
                                - key: fields
                                  value: '["people_home", "lights_on"]'
                            enabled: true
                    traefik:
                        allowCors: false
                        enabled: true
                        entrypoints:
                            - websecure
        persistence:
            config:
                enabled: true
                mountPath: /config
                readOnly: false
                storageClass: ""
                targetSelectAll: true
                volsync:
                    - credentials: backblaze
                      dest:
                        enabled: false
                      name: config
                      src:
                        enabled: true
                      type: restic
            init:
                defaultMode: "0777"
                enabled: true
                mountPath: /config/init
                objectName: init
                readOnly: true
                targetSelector:
                    main: {}
                type: configmap
        prometheus:
            serviceMonitor:
                enabled: false
        release_name: home-assistant
        resources:
            limits:
                cpu: 8000m
        scaleExternalInterface:
            - hostInterface: br1
              ipam:
                staticIPConfigurations:
                    - 10.242.10.42/24
                staticRoutes: []
                type: static
        securityContext:
            container:
                UMASK: "0022"
                capabilities:
                    add:
                        - CAP_NET_RAW
                        - CAP_NET_BIND_SERVICE
                readOnlyRootFilesystem: false
                runAsGroup: 0
                runAsNonRoot: false
                runAsUser: 0
            pod:
                fsGroupChangePolicy: OnRootMismatch
        service:
            main:
                enabled: true
                loadBalancerIP: ""
                ports:
                    main:
                        port: 8123
                        targetPort: 8123
                type: LoadBalancer
        workload:
            main:
                podSpec:
                    containers:
                        main: {}
                    initContainers:
                        init:
                            command: /config/init/init.sh
                            enabled: true
                            imageSelector: yqImage
                            type: init
                replicas: 1
                type: Deployment
